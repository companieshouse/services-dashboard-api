# NOTE: There is a CONVENTION here:
#         when running in AWS/Lambda
#         The Java code automatically retrieves, from AWS SSM, anything that here ends with '.secret'
#         (That's because we don't want those values to be in plain text in the ENV var section of the Lambda)
#         The code will then set these properties in the Spring Boot application context, so that
#         they can be used with the normal @Value annotation throughout the code.
#
#         Those secretes are automnatically created by the terraform code from the list provide by Vault.
#
#         The logic is this:
#
#         1. You define the secret-property you want with a '.secret' suffix (ex. "dt.server.apikey.secret")
#         2. You ask its value (ex. "xxxxxx") to be stored in Vault. You omit the '.secret' suffix in the name,
#            (as this would just add noise) and replace the dots with underscore (so you ask for  {"dt_server_apikey: "xxxxxx"})
#         3. Terraform will create a secret in AWS SSM with the same name: "dt_server_apikey"
#            (the reason why we don't want the dots in those names is that dots inhibt the usage in other contexts
#             like in the ENV var section of Lambda or ECS)
#         4. At runtime, as said, the code will source all the secrets from AWS SSM and set them in the Spring Boot context
#            (like if they were set in application.properties eg.: dt.server.apikey.secret=xxxxxx)
#
#     So, in short, keeping this convention allows everything to work automatically.


# MANDATORY
dt.server.apikey.secret=${DT_SERVER_APIKEY}
dt.server.baseurl=${DT_SERVER_BASEURL}
gh.token.secret=${GH_TOKEN}
sonar.token.secret=${SONAR_TOKEN}

# WITH DEFAULTS
app-id=${APP_ID:api_ch_gov_uk.services-dashboard}
loglevel=info
deepScan.enabled=${DEEP_SCAN_ENABLED:false}

server.port=${SERVER_PORT:8082}
dt.server.endpoint.proj=${DT_SERVER_ENDP_PROJ:/api/v1/project}
dt.server.pagination.max=${DT_SERVER_PAGINATION_MAX:100}
dt.server.header.apikey=${DT_SERVER_HEADER_APIKEY:X-API-Key}
dt.server.header.totcount=${DT_SERVER_HEADER_TOTCOUNT:x-total-count}

# mongo protocol might be different from just "mongodb", ex: "mongodb+srv"
mongo.protocol=${MONGODB_PROTOCOL:mongodb}
mongo.user.secret=${MONGODB_USER}
mongo.password.secret=${MONGODB_PASSWORD}
# not always the port is required, and then the ':', so better to keep all consistently together
mongo.hostandport.secret=${MONGODB_HOST_AND_PORT}
mongo.dbname=${MONGODB_DBNAME:services_dashboard}
mongo.collectionNameProj=${MONGODB_COLLECTION_NAME_PROJ:projects}
mongo.collectionNameConf=${MONGODB_COLLECTION_NAME_CONF:config}
mongo.configObjectId=singletonConfig
spring.data.mongodb.mapping.field-mapping-strategy=ignore

# SONARQUBE PARAMS
sonar.url=${SONAR_URL:https://sonarqube.companieshouse.gov.uk}
sonar.metrics=vulnerabilities,bugs,code_smells,coverage
sonar.endpoint.measures=api/measures/component
sonar.projkeys.preamble=uk.gov.companieshouse:

# GITHUB PARAMS
gh.api=https://api.github.com
gh.org=companieshouse
gh.home=https://github.com/${gh.org}
gh.header.accept=application/vnd.github.v3+json
gh.releases.perPage=${GIT_RELEASES_PER_PAGE:7}

# ENDOFLIFE PARAMS
endol.api.url=https://endoflife.date/api/
endol.projects=go,nodejs,amazon-corretto,oracle-jdk,spring-framework,spring-boot

# AWS
aws.profile=${AWS_PROFILE:dev}
aws.region=${AWS_REGION:eu-west-2}
aws.envs=${AWS_ENVS:cidev,staging,live}

# Lambda trigger
spring.cloud.function.definition=handleEvent

# add debug info
logging.level.org.springframework=DEBUG
logging.level.org.springframework.cloud.function=DEBUG
